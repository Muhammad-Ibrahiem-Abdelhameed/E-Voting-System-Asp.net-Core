// <auto-generated />
using System;
using EVotingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EVotingSystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190623112431_M1")]
    partial class M1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EVotingSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EVotingSystem.Models.Candidate", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CurrentVoted");

                    b.Property<int>("ListNumber");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Picture");

                    b.Property<string>("Position")
                        .IsRequired();

                    b.Property<string>("VoteId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("VoteId", "ListNumber")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("EVotingSystem.Models.Result", b =>
                {
                    b.Property<string>("Id");

                    b.Property<long>("CurrentVoted");

                    b.Property<string>("Description");

                    b.Property<long>("TotalVoters");

                    b.Property<string>("Winner");

                    b.HasKey("Id");

                    b.HasIndex("Winner");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("EVotingSystem.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("EVotingSystem.Models.SupervisorsVotes", b =>
                {
                    b.Property<string>("SupervisorId");

                    b.Property<string>("VoteId");

                    b.HasKey("SupervisorId", "VoteId");

                    b.HasAlternateKey("SupervisorId");

                    b.HasIndex("VoteId");

                    b.ToTable("SupervisorsVotes");
                });

            modelBuilder.Entity("EVotingSystem.Models.Vote", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Devices")
                        .IsRequired();

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("StateId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("VoteType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("EVotingSystem.Models.Voter", b =>
                {
                    b.Property<string>("Id");

                    b.Property<bool>("AllowPhone");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Fingerprint");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("EVotingSystem.Models.VoterVotes", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsVoted");

                    b.Property<DateTime>("LoggedOutTime");

                    b.Property<string>("ResultId");

                    b.Property<DateTime>("SignedInTime");

                    b.Property<string>("VoteId")
                        .IsRequired();

                    b.Property<string>("VoterId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("VoteId");

                    b.HasIndex("VoterId");

                    b.HasIndex("Id", "VoteId")
                        .IsUnique();

                    b.ToTable("VoterVotes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EVotingSystem.Models.Candidate", b =>
                {
                    b.HasOne("EVotingSystem.Models.Vote", "Vote")
                        .WithMany()
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EVotingSystem.Models.Result", b =>
                {
                    b.HasOne("EVotingSystem.Models.Vote", "Vote")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EVotingSystem.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("Winner");
                });

            modelBuilder.Entity("EVotingSystem.Models.SupervisorsVotes", b =>
                {
                    b.HasOne("EVotingSystem.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EVotingSystem.Models.Vote", "Vote")
                        .WithMany()
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EVotingSystem.Models.Vote", b =>
                {
                    b.HasOne("EVotingSystem.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("EVotingSystem.Models.Voter", b =>
                {
                    b.HasOne("EVotingSystem.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Voter")
                        .HasForeignKey("EVotingSystem.Models.Voter", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EVotingSystem.Models.State", "State")
                        .WithMany("Voters")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EVotingSystem.Models.VoterVotes", b =>
                {
                    b.HasOne("EVotingSystem.Models.Result")
                        .WithMany("VoterVotes")
                        .HasForeignKey("ResultId");

                    b.HasOne("EVotingSystem.Models.Vote", "Vote")
                        .WithMany()
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EVotingSystem.Models.Voter", "Voter")
                        .WithMany("VoterVotes")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EVotingSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EVotingSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EVotingSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EVotingSystem.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
